import logging
import sqlite3
import json
import os
import random
import calendar
from datetime import time, datetime, timedelta
import pytz
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes,
    ConversationHandler, 
    MessageHandler, 
    filters
)
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SELECTING_TIME, SELECTING_TIMEZONE = range(2)
NAME, DATE_Q, TIME_Q, INFO, OPT = range(5)
TIPS = [
    "–í—ã–∫–ª—é—á–∞–π—Ç–µ —Å–≤–µ—Ç –∏ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã, –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è",
    "–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Ä–µ—Å—É—Ä—Å—ã",
    "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ —É–ø–∞–∫–æ–≤–∫–∏ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã",
    "–ü–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –º–µ–Ω—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è",
    "–°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ—Ç—Ö–æ–¥—ã",
    "–í—ã–±–∏—Ä–∞–π—Ç–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã–µ –≤–∏–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–∏—Ö–≤–æ–¥–∏—Ç–µ–ª–µ–π - –ø–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É –º–µ—Å–∏–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤",
    "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥—Ä—É–∑—å—è–º–∏ –∏ –±–ª–∏–∑–∫–∏–º –æ –ø—Ä–æ–±–ª–µ–º–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏—è!",
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ , —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–º–∞—Ç–∞, —É—á–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ü–∏—è—Ö –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞—Ö"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        hour INTEGER,
        minute INTEGER,
        timezone TEXT
    )
''')
conn.commit()

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô =====
def init_json_file():
    default_data = {"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è": {}}
    if not os.path.exists("reminder.json"):
        with open("reminder.json", "w", encoding='utf-8') as file:
            json.dump(default_data, file, ensure_ascii=False, indent=4)

def json_editor(user_id, key, value):
    init_json_file()
    user_id = str(user_id)
    
    with open("reminder.json", "r", encoding='utf-8') as file:
        try:
            data = json.load(file)
        except json.JSONDecodeError:
            data = {"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è": {}}
    
    if "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" not in data:
        data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"] = {}
    
    if user_id not in data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]:
        data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][user_id] = {"—á–∞—Å–æ–≤–æ–π_–ø–æ—è—Å": 0, "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è": []}
    
    if key == "–Ω–∞–∑–≤–∞–Ω–∏–µ":
        data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][user_id]["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"].insert(0, {})
    
    data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][user_id]["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][0][key] = value
    
    with open("reminder.json", "w", encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def json_getter(user_id):
    init_json_file()
    user_id = str(user_id)
    
    with open("reminder.json", "r", encoding='utf-8') as file:
        data = json.load(file)
        
        if "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" not in data or user_id not in data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        if not data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][user_id]["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]:
            raise ValueError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        reminder = data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][user_id]["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][0]
        return (
            reminder["–Ω–∞–∑–≤–∞–Ω–∏–µ"],
            reminder["–¥–∞—Ç–∞"],
            reminder["–≤—Ä–µ–º—è"],
            reminder["id"]
        )

def get_user_timezone(user_id):
    init_json_file()
    try:
        with open("reminder.json", "r", encoding='utf-8') as file:
            data = json.load(file)
            return data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"].get(str(user_id), {}).get("—á–∞—Å–æ–≤–æ–π_–ø–æ—è—Å", 0)
    except (json.JSONDecodeError, KeyError):
        return 0

def create_callback_data(action, *args):
    return ";".join([action] + [str(arg) for arg in args])

def separate_callback_data(data):
    return data.split(";")

def create_clock(tz_offset=0, hour=None, minute=None, period=None):
    now = datetime.now()
    
    if hour is None:
        hour = (now.hour + tz_offset) % 24
        period = "pm" if hour >= 12 else "am"
        hour = hour % 12 or 12
        minute = (now.minute // 10) * 10
    
    keyboard = [
        [
            InlineKeyboardButton("‚Üë", callback_data=create_callback_data("HOUR_UP", hour, minute, period)),
            InlineKeyboardButton("‚Üë", callback_data=create_callback_data("MIN_UP", hour, minute, period)),
            InlineKeyboardButton("‚Üë", callback_data=create_callback_data("PERIOD_TOGGLE", hour, minute, period))
        ],
        [
            InlineKeyboardButton(str(hour), callback_data="IGNORE"),
            InlineKeyboardButton(f"{minute:02d}", callback_data="IGNORE"),
            InlineKeyboardButton(period, callback_data="IGNORE")
        ],
        [
            InlineKeyboardButton("‚Üì", callback_data=create_callback_data("HOUR_DOWN", hour, minute, period)),
            InlineKeyboardButton("‚Üì", callback_data=create_callback_data("MIN_DOWN", hour, minute, period)),
            InlineKeyboardButton("‚Üì", callback_data=create_callback_data("PERIOD_TOGGLE", hour, minute, period))
        ],
        [InlineKeyboardButton("OK", callback_data=create_callback_data("TIME_OK", hour, minute, period))]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_calendar(year=None, month=None):
    now = datetime.now()
    if year is None: year = now.year
    if month is None: month = now.month
    
    keyboard = [
        [InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="IGNORE")],
        [InlineKeyboardButton(day, callback_data="IGNORE") for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]]
    ]
    
    for week in calendar.monthcalendar(year, month):
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="IGNORE"))
            else:
                row.append(InlineKeyboardButton(str(day), callback_data=create_callback_data("DAY", year, month, day)))
        keyboard.append(row)
    
    keyboard.append([
        InlineKeyboardButton("<", callback_data=create_callback_data("PREV_MONTH", year, month)),
        InlineKeyboardButton(" ", callback_data="IGNORE"),
        InlineKeyboardButton(">", callback_data=create_callback_data("NEXT_MONTH", year, month))
    ])
    
    return InlineKeyboardMarkup(keyboard)

def process_clock_selection(update, context):
    query = update.callback_query
    data = query.data
    
    if data == "IGNORE":
        return False, None
    
    parts = separate_callback_data(data)
    if len(parts) < 4:
        return False, None
    
    action, hour, minute, period = parts[0], parts[1], parts[2], parts[3]
    
    try:
        hour = int(hour)
        minute = int(minute)
    except ValueError:
        return False, None
    
    if action == "HOUR_UP":
        hour = hour % 12 + 1
    elif action == "HOUR_DOWN":
        hour = (hour - 2) % 12 + 1
    elif action == "MIN_UP":
        minute = (minute + 10) % 60
    elif action == "MIN_DOWN":
        minute = (minute - 10) % 60
    elif action == "PERIOD_TOGGLE":
        period = "pm" if period == "am" else "am"
    elif action == "TIME_OK":
        return True, [hour, minute, period]
    
    query.edit_message_reply_markup(reply_markup=create_clock(hour=hour, minute=minute, period=period))
    return False, None

def process_calendar_selection(update, context):
    query = update.callback_query
    data = query.data
    
    if data == "IGNORE":
        return False, None
    
    parts = separate_callback_data(data)
    if len(parts) < 3:
        return False, None
    
    action, year, month = parts[0], parts[1], parts[2]
    
    try:
        year = int(year)
        month = int(month)
    except ValueError:
        return False, None
    
    if action == "DAY":
        if len(parts) < 4:
            return False, None
        day = int(parts[3])
        return True, datetime(year, month, day)
    elif action == "PREV_MONTH":
        prev_month = datetime(year, month, 1) - timedelta(days=1)
        query.edit_message_reply_markup(reply_markup=create_calendar(prev_month.year, prev_month.month))
    elif action == "NEXT_MONTH":
        next_month = datetime(year, month, 28) + timedelta(days=4)
        query.edit_message_reply_markup(reply_markup=create_calendar(next_month.year, next_month.month))
    
    return False, None

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –≠–ö–û-–ë–û–¢–ê =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçµ –ü—Ä–∏–≤–µ—Ç. –Ø EcoHelperüïäÔ∏è, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫–æ-–ø–æ–º–æ—â–Ω–∏–∫. "
        "–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏–∏ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã. "
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–≤–µ—Ç—ã. "
        "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–∏? –Ω–∞–∂–º–∏ –∫–æ–º–∞–Ω–¥—É /global_warming\n\n"
        "–¢–∞–∫–∂–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–π /reminder"
    )

async def vibrat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set_timezone")]
    ]
    await update.message.reply_text(
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_TIMEZONE

async def set_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    timezones = [
        ["–ú–æ—Å–∫–≤–∞ (UTC+3)", "Europe/Moscow"],
        ["–õ–æ–Ω–¥–æ–Ω (UTC+1)", "Europe/London"],
        ["–ù—å—é-–ô–æ—Ä–∫ (UTC-4)", "America/New_York"],
        ["–¢–æ–∫–∏–æ (UTC+9)", "Asia/Tokyo"]
    ]
    
    keyboard = []
    for tz in timezones:
        keyboard.append([InlineKeyboardButton(tz[0], callback_data=f"tz_{tz[1]}")])
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_TIME

async def handle_timezone_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    timezone = query.data.split("_")[1]
    context.user_data['timezone'] = timezone
    
    keyboard = [
        [
            InlineKeyboardButton("08:00", callback_data="8_0"),
            InlineKeyboardButton("12:00", callback_data="12_0"),
            InlineKeyboardButton("18:00", callback_data="18_0"),
        ],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="custom")]
    ]
    await query.edit_message_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_TIME

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "custom":
        await query.edit_message_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
        return SELECTING_TIME
    else:
        hour, minute = map(int, query.data.split("_"))
        timezone = context.user_data.get('timezone', 'Europe/Moscow')
        save_user_time(query.from_user.id, hour, minute, timezone)
        await query.edit_message_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–≤–µ—Ç—ã –≤ {hour:02d}:{minute:02d} –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É {timezone}."
        )
        await schedule_daily_tip(context, query.from_user.id, hour, minute, timezone)
        return ConversationHandler.END

async def handle_custom_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = update.message.text
        hour, minute = map(int, time_str.split(":"))
        if 0 <= hour < 24 and 0 <= minute < 60:
            timezone = context.user_data.get('timezone', 'Europe/Moscow')
            save_user_time(update.message.from_user.id, hour, minute, timezone)
            await update.message.reply_text(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–≤–µ—Ç—ã –≤ {hour:02d}:{minute:02d} –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É {timezone}."
            )
            await schedule_daily_tip(context, update.message.from_user.id, hour, minute, timezone)
            return ConversationHandler.END
        else:
            await update.message.reply_text("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return SELECTING_TIME
    except ValueError:
        await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30).")
        return SELECTING_TIME

def save_user_time(user_id: int, hour: int, minute: int, timezone: str):
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, hour, minute, timezone) VALUES (?, ?, ?, ?)",
        (user_id, hour, minute, timezone)
    )
    conn.commit()

async def schedule_daily_tip(context: ContextTypes.DEFAULT_TYPE, user_id: int, hour: int, minute: int, timezone: str):
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
        current_jobs = context.job_queue.get_jobs_by_name(str(user_id))
        for job in current_jobs:
            job.schedule_removal()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        try:
            tz = pytz.timezone(timezone)
        except pytz.exceptions.UnknownTimeZoneError:
            tz = pytz.timezone('Europe/Moscow')
            logger.warning(f"Unknown timezone {timezone} for user {user_id}, using default")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        context.job_queue.run_daily(
            send_daily_tip,
            time(hour, minute, tzinfo=tz),
            chat_id=user_id,
            name=str(user_id),
            data={"user_id": user_id}
        )
        logger.info(f"Scheduled daily tip for user {user_id} at {hour:02d}:{minute:02d} {timezone}")
    except Exception as e:
        logger.error(f"Error scheduling tip for user {user_id}: {e}")

async def send_daily_tip(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    
    cursor.execute("SELECT hour, minute, timezone FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if row:
        hour, minute, timezone = row
        day_index = datetime.now(pytz.timezone(timezone)).timetuple().tm_yday
        tip = TIPS[day_index % len(TIPS)]
        
        try:
            await context.bot.send_message(chat_id=user_id, text=tip)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô =====
async def reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        parse_mode="Markdown"
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    user_id = update.message.chat_id
    json_editor(user_id, "–Ω–∞–∑–≤–∞–Ω–∏–µ", name)
    
    await update.message.reply_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è {name}:",
        reply_markup=create_calendar(), 
        parse_mode="Markdown"
    )
    return DATE_Q

async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected, date = process_calendar_selection(update, context)
    if selected:
        json_editor(query.from_user.id, "–¥–∞—Ç–∞", date.strftime("%d/%m/%Y"))
        await query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {date.strftime('%d/%m/%Y')}",
            reply_markup=None
        )
        
        tz = get_user_timezone(query.from_user.id)
        await context.bot.send_message(
            chat_id=query.from_user.id, 
            text="‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            parse_mode="Markdown", 
            reply_markup=create_clock(tz_offset=tz)
        )
        return TIME_Q
    return DATE_Q

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected, time = process_clock_selection(update, context)
    if selected:
        user_id = str(query.from_user.id)
        r_id = random.randint(0, 100000)
        formatted_time = f"{time[0]}:{time[1]:02d} {time[2]}"
        
        json_editor(user_id, "–≤—Ä–µ–º—è", formatted_time)
        json_editor(user_id, "id", r_id)

        await query.edit_message_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {formatted_time}",
            reply_markup=None
        )
        
        reply_keyboard = [["–î–∞", "–ù–µ—Ç"]]
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return INFO
    return TIME_Q

async def get_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–î–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
        return OPT
    else:
        return await save_reminder(update, context)

async def get_additional_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info = update.message.text
    return await save_reminder(update, context, info)

async def save_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE, info=None):
    user_id = str(update.message.chat_id)
    try:
        name, date, time, r_id = json_getter(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    if info:
        json_editor(user_id, "–¥–æ–ø_–∏–Ω—Ñ–æ", info)
    
    reply_keyboard = [["/start", "/list"]]
    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–°–æ–±—ã—Ç–∏–µ: {name}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.chat_id)
    with open("reminder.json", "r+", encoding='utf-8') as file:
        data = json.load(file)
        if "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" in data and user_id in data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]:
            if data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][user_id]["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]:
                data["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"][user_id]["–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"].pop(0)
                file.seek(0)
                json.dump(data, file, ensure_ascii=False, indent=4)
                file.truncate()
    
    await update.message.reply_text(
        '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# ===== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
async def global_warming(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåç –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ ‚Äî –ø–æ–≤—ã—à–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –ó–µ–º–ª–∏. "
        "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ: /what"
    )

async def what(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üî• –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–º–∞—Ç–∞:\n"
        "- –°–∏–ª—å–Ω—ã–µ –∑–∞—Å—É—Ö–∏ –∏ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–¥—ã\n"
        "- –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–æ—Ä—è\n"
        "- –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è\n"
        "- –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –±–∏–æ—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è\n"
        "–ü—Ä–∏—á–∏–Ω—ã: /why"
    )

async def why(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏—è:\n"
        "1. –í—ã–±—Ä–æ—Å—ã –ø–∞—Ä–Ω–∏–∫–æ–≤—ã—Ö –≥–∞–∑–æ–≤ (CO2, –º–µ—Ç–∞–Ω)\n"
        "2. –°–∂–∏–≥–∞–Ω–∏–µ –∏—Å–∫–æ–ø–∞–µ–º–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞\n"
        "3. –í—ã—Ä—É–±–∫–∞ –ª–µ—Å–æ–≤\n"
        "4. –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã\n"
        "5. –°–≤–∞–ª–∫–∏ –º—É—Å–æ—Ä–∞ (–≤—ã–¥–µ–ª—è—é—Ç –º–µ—Ç–∞–Ω)\n\n"
        "üí° –ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å: –Ω–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /vibrat"
    )

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
def main():
    try:
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token("8158309846:AAEmFzC3vLLkb027O-SiGH0xQkOoJc59qpc").build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è —ç–∫–æ-—Å–æ–≤–µ—Ç–æ–≤
        eco_conv_handler = ConversationHandler(
            entry_points=[CommandHandler('vibrat', vibrat)],
            states={
                SELECTING_TIMEZONE: [CallbackQueryHandler(set_timezone)],
                SELECTING_TIME: [
                    CallbackQueryHandler(handle_timezone_selection, pattern="^tz_"),
                    CallbackQueryHandler(handle_time_selection),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_time)
                ]
            },
            fallbacks=[]
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminder_conv_handler = ConversationHandler(
            entry_points=[CommandHandler('reminder', reminder)],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
                DATE_Q: [CallbackQueryHandler(select_date)],
                TIME_Q: [CallbackQueryHandler(select_time)],
                INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_info)],
                OPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_additional_info)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("globalwarming", global_warming))
        application.add_handler(CommandHandler("what", what))
        application.add_handler(CommandHandler("why", why))
        application.add_handler(eco_conv_handler)
        application.add_handler(reminder_conv_handler)

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –ë–î
        cursor.execute("SELECT user_id, hour, minute, timezone FROM users")
        for row in cursor.fetchall():
            user_id, hour, minute, timezone = row
            try:
                tz = pytz.timezone(timezone)
                application.job_queue.run_daily(
                    send_daily_tip,
                    time(hour, minute, tzinfo=tz),
                    chat_id=user_id,
                    name=str(user_id),
                    data={"user_id": user_id}
                )
                logger.info(f"Restored schedule for user {user_id} at {hour:02d}:{minute:02d} {timezone}")
            except Exception as e:
                logger.error(f"Error restoring schedule for user {user_id}: {e}")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot...")
        application.run_polling()
        logger.info("Bot stopped")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
    finally:
        conn.close()

if __name__ == '__main__':
    main()